from autogen import Agent
from typing import List
import google.generativeai as genai

class CoordinatorAgent(Agent):
    def __init__(self, name, crawler_agent, rag_agent, interface_agent):
        super().__init__(name)
        self.crawler_agent = crawler_agent
        self.rag_agent = rag_agent
        self.interface_agent = interface_agent

    def start(self): 
        self._notify_interface('system_start', {
            'component': self.name,
            'action': 'initializing'
        })
        # Verificar si la colecci√≥n ya tiene datos antes de correr el crawler
        if hasattr(self.crawler_agent.crawler.collection, 'count'):
            try:
                count = self.crawler_agent.crawler.collection.count()
            except Exception:
                count = 0
        else:
            # Fallback si no existe el m√©todo count
            try:
                results = self.crawler_agent.crawler.collection.query(query_texts=["test"], n_results=1)
                count = len(results.get('documents', [[]])[0])
            except Exception:
                count = 0
        if count > 0:
            # Si ya hay datos, inicializar el RAG directamente
            self._notify_interface('rag_init', {
                'action': 'initializing_with_existing_data'
            })
            self.rag_agent.receive({'type': 'init_collection', 'collection': self.crawler_agent.crawler.collection},
                                   self)
        else:            # Si no hay datos, correr el crawler
            crawl_result = self.crawler_agent.receive({'type': 'crawl'}, self)
            self._notify_interface('crawler_start', {
                'reason': 'no_existing_data'
            })
            if crawl_result['type'] == 'crawled':
                self.rag_agent.receive({'type': 'init_collection', 'collection': crawl_result['collection']}, self)
                

    def ask(self, query):
        # Consultar al agente RAG
        self._notify_interface('query_received', {
            'query': query,
            'status': 'processing'
        })
        response = self.rag_agent.receive({'type': 'query', 'query': query}, self)

        if response['type'] == 'answer':
            # Utilizar Gemini para evaluar si la respuesta es √∫til
            evaluation = self._evaluate_response_usefulness(query, response['answer'])
            if not evaluation:
                # Extraer palabras clave problem√°ticas cuando la consulta no es relevante
                problematic_keywords = self._extract_problematic_keywords(query, response['answer'])

                print(f"La respuesta proporcionada por el sistema RAG no es √∫til para la consulta.")
                print(f"Palabras clave problem√°ticas identificadas: {', '.join(problematic_keywords)}")
                print("üêú Iniciando b√∫squeda inteligente con Ant Colony Optimization...")

                # NUEVO FLUJO: B√∫squeda en Google + Exploraci√≥n ACO
                # Paso 1: Buscar en Google y explorar con ACO
                aco_result = self.crawler_agent.receive({
                    'type': 'search_google_aco', 
                    'keywords': problematic_keywords,
                    'max_urls': 15,
                    'max_depth': 2
                }, self)
                
                if aco_result.get('type') == 'aco_completed' and aco_result.get('content_extracted'):
                    content_count = aco_result.get('content_extracted', 0)
                    aco_stats = aco_result.get('aco_statistics', {})
                    
                    print(f"üêú Exploraci√≥n ACO completada exitosamente")
                    print(f"üìä Contenido extra√≠do: {content_count} p√°ginas")
                    print(f"üéØ Tasa de √©xito ACO: {aco_stats.get('success_rate', 0)*100:.1f}%")
                    print(f"üï∏Ô∏è Senderos de feromonas creados: {aco_stats.get('pheromone_trails_count', 0)}")
                    
                    if content_count > 0:
                        # Paso 2: Consultar nuevamente al RAG con la informaci√≥n actualizada
                        print("üîÑ Consultando RAG con informaci√≥n obtenida por ACO...")
                        new_response = self.rag_agent.receive({'type': 'query', 'query': query}, self)
                        
                        if new_response['type'] == 'answer':
                            print("‚úÖ Nueva respuesta generada con informaci√≥n de exploraci√≥n ACO")
                            return new_response['answer']
                        else:
                            return new_response.get('msg', 'Error en la nueva consulta despu√©s de exploraci√≥n ACO')
                    else:
                        print("‚ö†Ô∏è ACO no extrajo contenido √∫til, intentando m√©todo alternativo...")
                        # Fallback a m√©todo anterior
                        return self._fallback_search_method(problematic_keywords, query)
                else:
                    print("‚ùå Error en exploraci√≥n ACO, intentando m√©todo alternativo...")
                    return self._fallback_search_method(problematic_keywords, query)

            return response['answer']

        return response.get('msg', 'Error al consultar la base de datos')

    def _evaluate_response_usefulness(self, query, answer):
        """
        Eval√∫a si la respuesta del RAG es √∫til para la consulta del usuario.

        Args:
            query (str): La consulta original del usuario.
            answer (str): La respuesta generada por el sistema RAG.

        Returns:
            bool: True si la respuesta es √∫til, False en caso contrario.
        """
        try:
            model = genai.GenerativeModel('gemini-1.5-flash')
            prompt = f"""
            Eres un evaluador de respuestas. Determina si la siguiente respuesta es √∫til para la consulta del usuario.

            Consulta del usuario: {query}

            Respuesta generada: {answer}

            INSTRUCCIONES:
            - Eval√∫a solamente si la respuesta proporciona informaci√≥n relevante para la consulta
            - Una respuesta √∫til contiene informaci√≥n espec√≠fica relacionada con la consulta
            - Una respuesta no √∫til puede ser vaga, no relacionada o simplemente indicar que no hay suficiente informaci√≥n
            - Responde √∫nicamente con 'true' si la respuesta es √∫til, o 'false' si no lo es.
            """

            response = model.generate_content(prompt)
            result = response.text.lower().strip()

            # Determinar si la respuesta es √∫til basada en el texto generado
            return 'true' in result
        except Exception as e:
            print(f"Error al evaluar la utilidad de la respuesta: {e}")
            # En caso de error, asumimos que la respuesta es √∫til
            return True

    def _extract_problematic_keywords(self, query, answer):
        """
        Extrae las palabras clave que hicieron que la consulta no fuera relevante.

        Args:
            query (str): La consulta original del usuario.
            answer (str): La respuesta generada por el sistema RAG.

        Returns:
            List[str]: Lista de palabras clave problem√°ticas.
        """
        try:
            model = genai.GenerativeModel('gemini-1.5-flash')
            prompt = f"""
            Eres un analizador de consultas. Tu tarea es identificar las palabras clave espec√≠ficas en la consulta del usuario que causaron que el sistema no pudiera proporcionar una respuesta √∫til.

            Consulta del usuario: {query}

            Respuesta del sistema: {answer}

            INSTRUCCIONES:
            - Identifica las palabras clave, t√©rminos espec√≠ficos, nombres de lugares, actividades o conceptos en la consulta que el sistema no pudo manejar adecuadamente
            - Enf√≥cate en sustantivos, nombres propios, actividades espec√≠ficas, y t√©rminos t√©cnicos que parecen estar fuera del alcance de la base de datos
            - No incluyas palabras comunes como art√≠culos, preposiciones o verbos generales
            - Devuelve √öNICAMENTE las palabras clave separadas por comas, sin explicaciones adicionales
            - Si no hay palabras problem√°ticas espec√≠ficas, responde con "ninguna"

            Palabras clave problem√°ticas:"""

            response = model.generate_content(prompt)
            result = response.text.strip()

            # Procesar la respuesta
            if result.lower() == "ninguna" or not result:
                return []
            
            # Dividir por comas y limpiar espacios
            keywords = [keyword.strip() for keyword in result.split(',') if keyword.strip()]
            
            return keywords

        except Exception as e:
            print(f"Error al extraer palabras clave problem√°ticas: {e}")
            return []
    
    def _fallback_search_method(self, problematic_keywords, query):
        """
        M√©todo de fallback cuando ACO falla.
        """
        print("üîÑ Ejecutando m√©todo de b√∫squeda alternativo...")
        
        # Usar el m√©todo anterior como fallback
        crawl_result = self.crawler_agent.receive({'type': 'crawl_keywords', 'keywords': problematic_keywords}, self)
        
        if crawl_result.get('type') == 'crawled':
            pages_processed = crawl_result.get('pages_processed', 0)
            print(f"ÔøΩÔøΩ Base de datos actualizada con {pages_processed} p√°ginas usando m√©todo alternativo")
            
            new_response = self.rag_agent.receive({'type': 'query', 'query': query}, self)
            if new_response['type'] == 'answer':
                return new_response['answer']
            else:
                return new_response.get('msg', 'Error en la nueva consulta despu√©s de actualizar la base de datos')
        else:
            error_msg = crawl_result.get('msg', 'Error desconocido')
            print(f"‚ùå No se pudo actualizar la base de datos: {error_msg}")
            return "Lo siento, no pude encontrar informaci√≥n relevante para tu consulta en este momento."
        
    def _notify_interface(self, event_type, event_data):
        """Env√≠a notificaciones sin system_state"""

        message = {
            'event_type': event_type,
            'event_data': event_data or {}
        }
        return self.interface_agent.receive(message, self)
