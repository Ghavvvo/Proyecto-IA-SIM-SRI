"""
Test simple para verificar el cambio en el flujo de preferencias
"""

import re

def check_preferences_flow():
    """
    Verifica que el c√≥digo modificado tenga el flujo correcto
    """
    print("üîç Verificando cambios en agent_coordinator.py...")
    
    
    with open('agent_coordinator.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    
    method_pattern = r'def _execute_aco_search_with_preferences\(self, preferences: dict\) -> str:(.*?)(?=\n    def|\Z)'
    match = re.search(method_pattern, content, re.DOTALL)
    
    if not match:
        print("‚ùå No se encontr√≥ el m√©todo _execute_aco_search_with_preferences")
        return False
    
    method_content = match.group(1)
    
    
    checks = {
        "PASO 1 - Consulta BD local": "Consultando informaci√≥n existente en la base de datos" in method_content,
        "Consulta al RAG primero": "self.rag_agent.receive" in method_content and method_content.index("self.rag_agent.receive") < method_content.index("search_google_aco") if "search_google_aco" in method_content else True,
        "Evaluaci√≥n de utilidad": "_evaluate_response_usefulness" in method_content,
        "Mensaje BD suficiente": "Encontr√© suficiente informaci√≥n en la base de datos local" in method_content,
        "Mensaje BD insuficiente": "La informaci√≥n en la base de datos no es suficiente" in method_content,
        "B√∫squeda condicional": "if evaluation:" in method_content,
    }
    
    print("\nüìã Resultados de la verificaci√≥n:")
    all_passed = True
    for check_name, passed in checks.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"  {status} {check_name}")
        if not passed:
            all_passed = False
    
    if all_passed:
        print("\n‚úÖ √âXITO: El flujo ha sido modificado correctamente")
        print("\nüìù Comportamiento esperado:")
        print("  1. Al obtener preferencias, primero consulta la BD local")
        print("  2. Eval√∫a si la informaci√≥n es suficiente")
        print("  3. Solo busca en DuckDuckGo si la informaci√≥n no es suficiente")
    else:
        print("\n‚ùå ERROR: Algunos cambios no se aplicaron correctamente")
    
    
    print("\nüìÑ Fragmento del c√≥digo modificado:")
    lines = method_content.split('\n')[:20]  
    for i, line in enumerate(lines):
        if "Consultando informaci√≥n existente" in line or "_evaluate_response_usefulness" in line:
            print(f"  >>> {line.strip()}")
        else:
            print(f"      {line.strip()}")

if __name__ == "__main__":
    check_preferences_flow()